cmake_minimum_required(VERSION 3.20.2)

project(${DREFINE})
set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_VERBOSE_MAKEFILE OFF)
set(TOOLS_DIR "${PROJECT_SOURCE_DIR}/ex_tools")
set(BOOST_DIR "${TOOLS_DIR}/boost_1_68_0")
set(GUROBI_HOME "${TOOLS_DIR}/gurobi912/linux64")
set(ENV{GUROBI_HOME} "${GUROBI_HOME}")
set(BOOST_ROOT "${BOOST_DIR}/installed")
set(SRC_DIR ${PROJECT_SOURCE_DIR}/src)
set(DEEPPOLY_DIR ${PROJECT_SOURCE_DIR}/deeppoly)



set(OPENBLAS_LIB openblas)

SET(xtensor_libs blas)
SET(boost_lib boost_program_options)
SET(pthread_lib pthread)
SET(gurobi_lib gurobi_c++ gurobi91)


option(ENABLE_DEBUG_MODE "Set debug mode if needed" OFF)

if(ENABLE_DEBUG_MODE)
  message("debug mode")
else()
  message("release mode")
endif()

find_package(Boost COMPONENTS program_options timer chrono thread)
if(NOT ${Boost_FOUND})
  message("Boost not found")
  execute_process(COMMAND make boost WORKING_DIRECTORY ${TOOLS_DIR})
  find_package(Boost REQUIRED COMPONENTS program_options timer chrono thread)
  SET(boost_installed "${TOOLS_DIR}/boost_1_68_0/installed")
  set(LIBS_INCLUDES "${boost_installed}/include")
  set(LIBS "${boost_installed}/lib")
else()
  SET(LIBS_INCLUDES ${Boost_INCLUDE_DIRS})
  SET(LIBS "${Boost_INCLUDE_DIRS}/../lib")
endif()

# list(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/gurobi_cmake")
# find_package(GUROBI)
# if(NOT ${GUROBI_FOUND})
#   execute_process(COMMAND make gurobi WORKING_DIRECTORY ${TOOLS_DIR})
#   find_package(GUROBI REQUIRED)
# endif()
execute_process(COMMAND make gurobi WORKING_DIRECTORY ${TOOLS_DIR})
list(APPEND LIBS_INCLUDES ${GUROBI_HOME}/include)
list(APPEND LIBS ${GUROBI_HOME}/lib)

list(APPEND CMAKE_PREFIX_PATH "${TOOLS_DIR}/xt-build")

find_package(xtl)
if(NOT ${xtl_FOUND})
  execute_process(COMMAND make xtl WORKING_DIRECTORY ${TOOLS_DIR})
  find_package(xtl REQUIRED)
  if(NOT ${xtl_FOUND})
    message(ERROR "xtl not found even after installation!!")
  else()
    message(STATUS "Found xtl: ${xtl_INCLUDE_DIRS}/xtl")
  endif()
else()
  message(STATUS "Found xtl: ${xtl_INCLUDE_DIRS}/xtl")
endif()
list(APPEND LIBS_INCLUDES ${xtl_INCLUDE_DIRS})

find_package(xtensor)
if(NOT ${xtensor_FOUND})
  execute_process(COMMAND make xtensor WORKING_DIRECTORY ${TOOLS_DIR})
  find_package(xtensor REQUIRED)
  if(NOT ${xtensor_FOUND})
    message(ERROR "xtensor not found even after installation!!")
  else()
    message(STATUS "Found xtensor: ${xtensor_INCLUDE_DIRS}/xtensor")
  endif()
else()
  message(STATUS "Found xtensor: ${xtensor_INCLUDE_DIRS}/xtensor")
endif()

#list(APPEND LIBS_INCLUDES ${xtensor_INCLUDE_DIRS})

# list(APPEND CMAKE_PREFIX_PATH "${TOOLS_DIR}/OpenBLAS-0.3.19/installed")
# find_package(OpenBLAS)
# if(NOT ${OpenBLAS_FOUND})
#   execute_process(COMMAND make openblas WORKING_DIRECTORY ${TOOLS_DIR})
#   find_package(OpenBLAS)
#   if(NOT ${OpenBLAS_FOUND})
#     message(ERROR "openblas not found even after installation!!")
#   else()
#     message(STATUS "Found openblas: ${OpenBLAS_INCLUDE_DIRS}")
#   endif()
# else()
#   message(STATUS "Found openblas: ${OpenBLAS_INCLUDE_DIRS}")
# endif()

# add_library(${OPENBLAS_LIB} SHARED IMPORTED)
# list(APPEND LIBS ${OpenBLAS_LIBRARIES})
# list(APPEND LIBS "/home/deep_refine/ex_tools/OpenBLAS-0.3.19/installed/lib")
# list(APPEND LIBS_INCLUDES ${OpenBLAS_INCLUDE_DIRS})
# set_target_properties(${OPENBLAS_LIB} PROPERTIES IMPORTED_LOCATION ${OPENBLAS_DIR}/installed/lib/libopenblas.a)
# list(APPEND LIBS ${OPENBLAS_LIB})
# target_include_directories(${OPENBLAS_LIB} INTERFACE ${OPENBLAS_DIR}/installed/include)


find_package(xtensor-blas)
if(NOT ${xtensor-blas_FOUND})
  execute_process(COMMAND make xtensor-blas WORKING_DIRECTORY ${TOOLS_DIR})
  find_package(xtensor-blas REQUIRED)
  if(NOT ${xtensor-blas_FOUND})
    message(ERROR "xtensor-blas not found even after installation!!")
  else()
    message(STATUS "Found xtensor-blas: ${xtensor-blas_INCLUDE_DIRS}/xtensor-blas")
  endif()
else()
  message(STATUS "Found xtensor-blas: ${xtensor-blas_INCLUDE_DIRS}/xtensor-blas")
endif()


include_directories(${LIBS_INCLUDES})
include_directories(${CMAKE_CURRENT_BINARY_DIR} "${PROJECT_SOURCE_DIR}")
link_directories(${LIBS})

message("Include path: ${LIBS_INCLUDES}")
message("LIBS Path: ${LIBS}")

ADD_DEFINITIONS(-std=c++14 -Wall)

SET(SOURCES ${SRC_DIR}/main.cpp ${SRC_DIR}/lib/drefine_driver.cc ${SRC_DIR}/lib/pullback.cc ${SRC_DIR}/lib/decision_making.cc ${SRC_DIR}/lib/milp_refine.cc ${SRC_DIR}/lib/milp_mark.cc ${DEEPPOLY_DIR}/analysis.cc ${DEEPPOLY_DIR}/deeppoly_configuration.cc ${DEEPPOLY_DIR}/deeppoly_driver.cc ${DEEPPOLY_DIR}/helper.cc ${DEEPPOLY_DIR}/interval.cc ${DEEPPOLY_DIR}/network.cc ${DEEPPOLY_DIR}/optimizer.cc ${DEEPPOLY_DIR}/parser.cc ${DEEPPOLY_DIR}/vnnlib.cc)
add_executable(${DREFINE} ${SOURCES})


target_link_libraries (${DREFINE} ${xtensor_libs} ${boost_lib} ${pthread_lib} ${gurobi_lib})
